So this are the last years winning projects of Chrom BuiltIn- AI Challenge.
Mochi - Making hard content enjoyable
Mochi is a Chrome extension that adapts web content for users with reading disabilities, ADHD, and dyslexia. Like its namesake, it makes hard-to-read content softer and more 
Digestible.  
(Google Chrome Built-in AI Challenge Winner Best ‘Real-World’ App (Chrome Extension)) 
Inspiration
Imagine trying to read a complex article when your brain processes text differently than others. For millions of people with reading disabilities, ADHD, and dyslexia, this isn't just an exercise - it's a daily challenge. Current accessibility tools either strip away content through summarization or offer basic font changes that barely scratch the surface of cognitive accessibility needs.
Enter Mochi - named after the soft, adaptable Japanese treat that makes hard things easier to digest. Just as mochi transforms rigid ingredients into something more approachable, our Chrome extension uses Built-in AI to make web content more accessible while preserving its full meaning and value.
What it does
Mochi revolutionizes cognitive accessibility by bringing AI-powered text adaptation right into your browser. Unlike traditional tools that summarize or simplify by removing content, Mochi maintains the complete reading experience while reducing cognitive load.
At its heart, Mochi uses Chrome's Built-in Gemini Nano AI to transform text in three thoughtfully designed ways:
"Simplify Complex Ideas" mode breaks down difficult concepts without losing depth
"Better Visual Organization" mode helps ADHD users maintain focus and attention
"Easier Reading Flow" mode makes text more predictable for dyslexic readers
Note: While these modes were designed for specific cognitive needs, we've consciously avoided labels in the interface to prevent stigmatization.
Each mode can be fine-tuned with three levels of adaptation (Low/Mid/High), complemented by research-based features like OpenDyslexic font support, cognitive-friendly color themes, and customizable text spacing.
Most importantly, because we use Chrome's Built-in AI, everything happens offline, right in your browser - ensuring both privacy and performance.
How I built it
The magic of Mochi lies in its sophisticated yet privacy-first architecture. By leveraging Chrome's Built-in Gemini Nano and Prompt API, we've created an intelligent system that:
Analyzes and chunks content for optimal processing
Applies disability-specific text adaptation strategies
Maintains the original meaning while reducing cognitive load
Works seamlessly across any website
Our development focused on two key principles: cognitive accessibility and user privacy. Every feature, from our content preservation algorithms to our quick-processing system, was built to support these goals.
Challenges and Breakthroughs
Building Mochi meant tackling both technical and accessibility challenges head-on. I needed to:
Fine-tune Gemini Nano for quick, accurate text processing
Develop strategies for handling diverse webpage structures
Balance simplification with content preservation
Create an interface that works for different cognitive needs
Through careful iteration and testing, I overcame these challenges while discovering innovative approaches to cognitive accessibility.
Impact and Future
Mochi represents more than just technical innovation - it's a step toward making the web truly accessible for everyone. As one of the first cognitive accessibility tools using Chrome's Built-in AI, we're demonstrating how local AI processing can transform user experiences while maintaining privacy.
Looking ahead, we're excited to expand Mochi's capabilities with:
Support for additional languages
Enhanced customization options
Educational institution partnerships
Collaboration with disability advocacy groups
Technical Innovation
Mochi showcases the power of Chrome's Built-in AI through:
Sophisticated text adaptation using the Prompt API
100% offline, privacy-preserving processing
Cross-site compatibility
Intelligent content chunking and restructuring
Adaptive prompting based on user needs
By bringing together cognitive accessibility expertise and cutting-edge AI technology, Mochi creates a more inclusive web experience - one reader at a time.
Built With
css
html
javascript
  

Orma
Orma is your browser's memory layer that transforms how you learn online. Instantly capture, understand, and chat with your browsing history using AI, making digital knowledge truly personal. 
(Google Chrome Built-in AI Challenge Winner Best Hybrid AI App (Chrome Extension))
The Story Behind Orma
Inspiration
As a passionate learner who spends hours browsing the web, I found myself constantly struggling with the same problem: I would discover amazing information, only to forget where I found it days later. Browser bookmarks became a graveyard of forgotten tabs, and note-taking apps felt disconnected from my browsing experience. I wanted something that could remember not just what I saved, but understand it, connect it, and help me learn better.
That's when I had the idea for Orma (meaning "Memory" in Malayalam) – a browser extension that would act as my digital memory, understanding and connecting everything I learn online.
What it does
Orma is a sophisticated memory layer for your browser that transforms how you capture and interact with online information. Using AI, it automatically processes and connects your browsing history, allowing you to:
Save anything with one click
Search using natural language
Chat with your browsing history
Generate smart summaries
Create project workspaces automatically
Enhance AI tools like ChatGPT with perfect context
How we built it
I built Orma using a carefully selected stack to ensure both performance and elegance:
Frontend: React 18 with TailwindCSS for a native-feeling interface
AI Processing: Google Nano AI for lightning-fast local processing
Memory Storage: IndexedDB via Dexie for reliable vector storage
Search: Vector search powered by OpenAI Embeddings
Extension: Chrome Extensions Manifest V3
The architecture focuses on offline-first capabilities while maintaining real-time responsiveness. Every interaction is designed to provide immediate feedback with smooth animations.
Challenges we ran into
Vector Storage: Implementing efficient vector storage in IndexedDB was tricky. I had to carefully optimize the storage and retrieval mechanisms to maintain performance with growing data.
Real-time Processing: Balancing immediate user feedback with AI processing was challenging. I solved this by implementing a queue system with visual feedback.
Context Management: Ensuring that saved memories maintained their original context while being useful for AI interactions required several iterations of the embedding pipeline.
Extension Performance: Keeping the extension lightweight while handling complex processing was tough. I leveraged Chrome's built-in AI capabilities to reduce the load.
Accomplishments that we're proud of
Built a fully functional memory system that actually enhances learning
Achieved near-instant search across thousands of memories
Created a natural chat interface for browsing history
Implemented smooth, real-time updates with beautiful animations
Designed an intuitive interface that gets out of your way
What we learned
Deep insights into vector databases and embeddings
Techniques for efficient browser extension development
Strategies for combining local and cloud AI processing
The importance of user feedback in memory management systems
Methods for maintaining context in AI-powered applications
What's next for Orma
Collaborative Memory Spaces: Enable teams to build shared knowledge bases
Advanced Learning Analytics: Provide insights into learning patterns
Cross-browser Support: Expand beyond Chrome
Offline AI: Enhance local processing capabilities
API Ecosystem: Allow developers to build on top of Orma

Orma is more than just a project – it's a step toward enhancing human memory with AI in a way that feels natural and empowering. We believe technology should enhance our natural abilities, not replace them, and Orma is our contribution to this vision.
Built With
chrome
googlenano
openai
react
tailwindcss



